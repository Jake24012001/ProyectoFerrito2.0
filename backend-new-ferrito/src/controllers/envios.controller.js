const envioService = require('../services/envios.service');

// üîç Obtener todos los env√≠os
async function obtenerEnvios(req, res) {
  try {
    const envios = await envioService.obtenerEnvios();
    res.status(200).json(envios);
  } catch (error) {
    console.error('Error al obtener env√≠os:', error.message);
    res.status(500).json({ message: 'Error al obtener env√≠os' });
  }
}

// üîç Obtener env√≠o por factura
async function obtenerEnvioPorFactura(req, res) {
  try {
    const factura_id = parseInt(req.params.id);
    const envio = await envioService.obtenerEnvioPorFactura(factura_id);
    res.status(200).json(envio);
  } catch (error) {
    console.error('Error al obtener env√≠o por factura:', error.message);
    res.status(500).json({ message: 'Error al obtener env√≠o por factura' });
  }
}

// üÜï Crear nuevo env√≠o
async function crearEnvio(req, res) {
  try {
    const {
      factura_id,
      direccion_envio,
      estado_envio,
      fecha_envio,
      fecha_entrega_estimada,
      fecha_recepcion
    } = req.body;

    const nuevoEnvio = await envioService.crearEnvio({
      factura_id,
      direccion_envio,
      estado_envio,
      fecha_envio,
      fecha_entrega_estimada,
      fecha_recepcion
    });

    res.status(201).json(nuevoEnvio);
  } catch (error) {
    console.error('Error al crear env√≠o:', error.message);
    res.status(500).json({ message: 'Error al crear env√≠o' });
  }
}

// ‚úèÔ∏è Modificar env√≠o
async function modificarEnvio(req, res) {
  try {
    const id_envio = parseInt(req.params.id_envio);
    const {
      factura_id,
      direccion_envio,
      estado_envio,
      fecha_envio,
      fecha_entrega_estimada,
      fecha_recepcion
    } = req.body;

    const envioActualizado = await envioService.modificarEnvio({
      id_envio,
      factura_id,
      direccion_envio,
      estado_envio,
      fecha_envio,
      fecha_entrega_estimada,
      fecha_recepcion
    });

    res.status(200).json(envioActualizado);
  } catch (error) {
    console.error('Error al modificar env√≠o:', error.message);
    res.status(500).json({ message: 'Error al modificar env√≠o' });
  }
}

// ‚ùå Eliminar env√≠o
async function eliminarEnvio(req, res) {
  try {
    const id_envio = parseInt(req.params.id_envio);
    const resultado = await envioService.eliminarEnvio(id_envio);
    res.status(200).json({ message: 'Env√≠o eliminado correctamente', resultado });
  } catch (error) {
    console.error('Error al eliminar env√≠o:', error.message);
    res.status(500).json({ message: 'Error al eliminar env√≠o' });
  }
}

module.exports = {
  obtenerEnvios,
  obtenerEnvioPorFactura,
  crearEnvio,
  modificarEnvio,
  eliminarEnvio
};